# It's only in the cache so that it has global scope. This holds a list of
# all files generated by lcmgen
set(lcmgen_ALL "" CACHE INTERNAL "In the cache to make it global")

# Call lcmgen to generate lcm types. All lcm files listed in a single lcmgen
# call must contain messages from the same package. Furthermore, the caller
# must list all messages that are generated.
# example:
#   lcmgen(foo_lcmn
#          PACKAGE foo
#          SOURCES bar.lcm baz.lcm
#          MESSAGES bar_t baz_t)
function(lcmgen target_name)
  set(zero_value_args )
  set(one_value_args PACKAGE)
  set(multi_value_args SOURCES MESSAGES)
  cmake_parse_arguments(lcmgen "${zero_value_args}" "${one_value_args}"
                        "${multi_value_args}" ${ARGN} )

  # get the output directory
  string(REPLACE "." "/" package_dir ${lcmgen_PACKAGE})

  # create a cmake list of all the output files with full path
  set(lcmgen_OUTPUT_LIST "")
  foreach(msg ${lcmgen_MESSAGES})
    set(gen_path "${LCMGEN_OUTPUT_PATH}/${package_dir}/${msg}.hpp")
    list(APPEND lcmgen_OUTPUT_LIST ${gen_path})
    set_source_files_properties(${gen_path} PROPERTIES GENERATED TRUE)
  endforeach()

  # create a cmake list of all the input files with full path
  set(lcmgen_SOURCE_LIST "")
  foreach(src ${lcmgen_SOURCES})
    get_filename_component(src_fullpath ${src} ABSOLUTE)
    list(APPEND lcmgen_SOURCE_LIST ${src_fullpath})
  endforeach()

  # break list into space separated string for the comand line
  string(REPLACE ";" " " lcmgen_SOURCES "${lcmgen_SOURCE_LIST}")

  # custom command to actually generate the files
  add_custom_command(OUTPUT ${lcmgen_OUTPUT_LIST}
                     COMMAND lcmgen --cpp --cpp-hpath ${LCMGEN_OUTPUT_PATH}
                             ${lcmgen_SOURCES}
                     DEPENDS ${lcmgen_SOURCE_LIST})

  # virtual target depending on all of the outputs, this is required because of
  # cmake stupidity. If we don't do this, then the custom command wont generate
  # any rules. Also, if any target depends on the input files a parallel build
  # may try to run the custom command multiple times at once.
  add_custom_target(${target_name} DEPENDS ${lcmgen_OUTPUT_LIST})

  # add the virtual target to a global list of all virtual targets so we can
  # create a top level target to build all lcmtypes
  set(lcmgen_all ${lcmgen_ALL})
  list(APPEND lcmgen_all ${target_name})
  set(lcmgen_ALL ${lcmgen_all} CACHE INTERNAL "In the cache to make it global")
endfunction()


